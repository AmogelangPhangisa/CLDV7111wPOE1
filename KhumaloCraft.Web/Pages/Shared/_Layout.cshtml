@using System.Security.Claims
@{
  var menuItems = new List<dynamic>
{
new { Page = "/Index", Text = "Home" },
new { Page = "/About", Text = "About us" },
new { Page = "/Work/Index", Text = "My work" },
new { Page = "/Contact", Text = "Contact us" }
};

  var adminItems = new List<dynamic>
{
new { Page = "/Admin/Categories/Index", Text = "Categories" },
new { Page = "/Admin/Products/Index", Text = "Products" },
new { Page = "/Admin/Orders/Index", Text = "Orders" },
  @* new { Page = "/Admin/Shipping/Index", Text = "Shipping" },
new { Page = "/Admin/Payments/Index", Text = "Payments" }, *@
};
}

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>@ViewData["Title"] - KhumaloCraft</title>
  <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.5/font/bootstrap-icons.min.css" />
  <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
</head>

<body class="d-flex flex-column min-vh-100">
  @await Html.PartialAsync("_Header.cshtml", Tuple.Create(menuItems, adminItems))

  <div class="flex-grow-1">
    <main role="main">
      @RenderBody()
    </main>
  </div>

  @await Html.PartialAsync("_Footer.cshtml", menuItems)

  <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>
  <script src="~/lib/jquery/dist/jquery.min.js"></script>
  <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
  <script src="~/js/site.js" asp-append-version="true"></script>

  @await RenderSectionAsync("Scripts", required: false)

  <div aria-live="polite" aria-atomic="true" class="position-fixed top-0 end-0 p-3" style="z-index: 2000">
    <div id="snackbarToast" class="toast bg-white" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="5000">
      <div class="toast-header">
        <strong class="me-auto">New Notification!</strong>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>

      <div class="toast-body fw-bold">
        <!-- Message will be injected here -->
      </div>
    </div>
  </div>

  @if (TempData["ToastMessage"] != null)
  {
    <script>
      showToast("@TempData["ToastMessage"]");
    </script>
  }

  <script>
    document.addEventListener("DOMContentLoaded", async function () {
      let newMessageCount = 0; // Initialize the new message counter

      const signalRHubUrl = "@ViewData["SignalRHubUrl"]";
      const apiHost = "@ViewData["ApiHost"]";
      const vapid = "@ViewData["VapidPublic"]";

      const connection = new signalR.HubConnectionBuilder()
        .withUrl(signalRHubUrl)
        .build();

      // Update badge with the current message count
      function updateMessageCount() {
        const badgeElement = document.getElementById("notificationBadge");
        if (newMessageCount > 0) {
          badgeElement.textContent = newMessageCount;
          badgeElement.style.display = "inline"; // Show badge if count > 0
        } else {
          badgeElement.style.display = "none"; // Hide badge if no new messages
        }
      }

      // Handle incoming SignalR messages
      connection.on("ReceiveNotification", async function (message) {
        showToast(message);
        newMessageCount++;
        updateMessageCount();

        if ("serviceWorker" in navigator && "PushManager" in window) {
          console.log("Service Worker and Push Manager available");

          try {
            console.log("Waiting for Service Worker to be ready...");
            const registration = await navigator.serviceWorker.ready;
            console.log("Service Worker is ready for push");

            registration.showNotification("New Notification:", {
              body: `Status updated to ${message}`,
              icon: '/images/logo-k.svg',
              vibrate: [200, 100, 200],
              tag: 'new-message'
            });
          } catch (err) {
            console.error("Error displaying notification:", err);
          }
        } else {
          console.log("Service Worker or Push Manager not available.");
        }
      });

      // Start the SignalR connection
      connection.start()
        .then(() => console.log("Connected to SignalR"))
        .catch(err => console.error("Error connecting to SignalR:", err));

      // Fetch unread notifications
      try {
        const userId = "@User.FindFirstValue(ClaimTypes.NameIdentifier)";
        const response = await fetch(`${apiHost}api/notifications/user/${userId}/unread`);

        if (!response.ok) {
          console.error("Failed to fetch notifications:", response.status);
          return;
        }

        const notifications = await response.json();
        newMessageCount = notifications.filter(n => !n.isRead).length;
        updateMessageCount();

      } catch (error) {
        console.error("Error fetching unread notifications:", error);
      }

      // Function to subscribe to push notifications
      async function subscribeUser() {
        const registration = await navigator.serviceWorker.ready;

        // Convert VAPID key to Uint8Array
        const applicationServerKey = urlBase64ToUint8Array(vapid);
        const subscription = await registration.pushManager.subscribe({
          userVisibleOnly: true,
          applicationServerKey: applicationServerKey
        });

        await fetch(`${apiHost}api/notifications/save-subscription`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(subscription)
        });
      }

      // Request notification permission and subscribe
      if (Notification.permission === "granted") {
        subscribeUser();
      } else if (Notification.permission === "default") {
        Notification.requestPermission().then(permission => {
          if (permission === "granted") {
            subscribeUser();
          }
        });
      }

      // Register service worker
      if ("serviceWorker" in navigator) {
        navigator.serviceWorker.register("/service-worker.js")
          .then((registration) => {
            console.log("Service Worker registered:", registration);
          })
          .catch(error => {
            console.error("Service Worker registration failed:", error);
          });
      }

      // Helper function to decode base64 URL
      function urlBase64ToUint8Array(base64String) {
        const padding = '='.repeat((4 - base64String.length % 4) % 4);
        const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');
        const rawData = window.atob(base64);
        return Uint8Array.from([...rawData].map((char) => char.charCodeAt(0)));
      }
    });
  </script>


</body>

</html>